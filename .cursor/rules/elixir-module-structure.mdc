---
description: 
globs: .ex,.exs
alwaysApply: false
---
# Elixir Module Structure

<rule>
name: elixir_module_structure
description: Best practices for structuring Elixir modules in a clean, maintainable way
filters:
  - type: file_extension
    pattern: "\\.ex$|\\.exs$"

actions:
  - type: suggest
    message: |
      # Elixir Module Structure Best Practices

      ## Module Organization
      - Group related functions together
      - Organize code in the following order:
        1. Module attributes and constants
        2. Public API functions
        3. Private implementation functions
        4. Callback implementations
        5. Helper functions
      
      ## Module Size
      - Keep modules focused on a single responsibility
      - Consider splitting large modules into smaller, more focused ones
      - Use composition over inheritance to share functionality
      
      ## Imports and Aliases
      - Place all `import`, `alias`, and `require` statements at the top of the module
      - Only import or alias what you need, avoid wildcard imports
      - Group related imports/aliases together
      - Prefer aliases over imports when possible
      
      ## Function Definitions
      - Keep functions short and focused on a single task
      - Avoid deeply nested functions
      - Place related function clauses together
      - Use function clauses and pattern matching instead of conditionals when possible
      
      ## Documentation
      - Document all public functions with `@doc` attributes
      - Use `@moduledoc` to describe the module's purpose
      - Add `@typedoc` for complex type specifications
      
      ## Type Specifications
      - Use `@type`, `@typep`, and `@spec` to document function interfaces
      - Define complex types at the top of the module
      - Use meaningful type names that describe the purpose

examples:
  - input: |
      defmodule MessyModule do
        import List
        import String
        import Enum
        
        def func1(x), do: x + 1
        
        def func3(x), do: private_helper(x) * 2
        
        defp private_helper(x), do: x + 5
        
        def func2(x), do: x - 1
      end
    output: |
      defmodule OrganizedModule do
        @moduledoc """
        This module handles organized operations.
        """
        
        import Enum, only: [map: 2]
        import List, only: [first: 1, last: 1]
        import String, only: [downcase: 1]
        
        @type input_value :: integer()
        @type result :: integer()
        
        @spec func1(input_value()) :: result()
        def func1(x), do: x + 1
        
        @spec func2(input_value()) :: result()
        def func2(x), do: x - 1
        
        @spec func3(input_value()) :: result()
        def func3(x), do: private_helper(x) * 2
        
        defp private_helper(x), do: x + 5
      end

metadata:
  priority: high
  version: 1.0
</rule> 