---
description: 
globs: .ex,.exs
alwaysApply: false
---
# Elixir Pattern Matching

<rule>
name: elixir_pattern_matching
description: Effective use of pattern matching, one of Elixir's most powerful features
filters:
  - type: file_extension
    pattern: "\\.ex$|\\.exs$"

actions:
  - type: suggest
    message: |
      # Elixir Pattern Matching Best Practices

      ## Function Clauses
      - Use multiple function clauses instead of conditionals when possible
      - Order pattern matches from specific to general
      - Use guard clauses to further refine pattern matching
      - Ensure all possible patterns are covered to avoid function clause errors
      
      ## Variable Binding
      - Use the pin operator `^` when you want to match against a variable's value
      - Use underscore `_` for variables you don't need
      - Use descriptive names for pattern variables that reflect their purpose
      - Avoid deep nesting in pattern matches
      
      ## Destructuring
      - Use pattern matching to destructure complex data types (lists, maps, tuples)
      - Destructure directly in function parameters when possible
      - Use pattern matching in `with` statements for sequential operations
      - Extract only the parts of the data structure you need
      
      ## Maps and Structs
      - When matching on maps, only specify the keys you need
      - Use pattern matching to validate the presence of required keys
      - Pattern match on specific struct types to ensure correct data type
      
      ## Tuples and Lists
      - Use pattern matching to extract elements from tuples by position
      - Match on list heads and tails with `[head | tail]` syntax
      - Consider pattern matching in list comprehensions and Enum operations
      
      ## Advanced Patterns
      - Use pattern matching in `case` statements for cleaner conditional logic
      - Combine pattern matching with guards for powerful filtering
      - Consider pattern matching in `receive` blocks for process messages
      - Use binary pattern matching for parsing binary data

examples:
  - input: |
      def process_data(data) do
        if is_list(data) do
          Enum.map(data, fn x -> x * 2 end)
        else
          if is_integer(data) do
            data * 2
          else
            if is_binary(data) do
              "Value: " <> data
            else
              {:error, "Unsupported data type"}
            end
          end
        end
      end
    output: |
      def process_data(data) when is_list(data) do
        Enum.map(data, fn x -> x * 2 end)
      end
      
      def process_data(data) when is_integer(data) do
        data * 2
      end
      
      def process_data(data) when is_binary(data) do
        "Value: " <> data
      end
      
      def process_data(_data) do
        {:error, "Unsupported data type"}
      end
  
  - input: |
      def extract_user_data(user) do
        name = user.name
        email = user.email
        age = user.age
        {name, email, age}
      end
    output: |
      def extract_user_data(%{name: name, email: email, age: age}) do
        {name, email, age}
      end

metadata:
  priority: high
  version: 1.0
</rule> 