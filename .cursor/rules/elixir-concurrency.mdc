---
description: 
globs: *.ex,*.exs
alwaysApply: false
---
# Elixir Concurrency Patterns

<rule>
name: elixir_concurrency
description: Best practices for handling concurrency in Elixir using processes, OTP, and other patterns
filters:
  - type: file_extension
    pattern: "\\.ex$|\\.exs$"

actions:
  - type: suggest
    message: |
      # Elixir Concurrency Best Practices

      ## Process Design
      - Keep processes focused on a single responsibility
      - Use appropriate abstractions (GenServer, Task, Agent, Supervisor)
      - Set timeouts for synchronous calls to prevent indefinite blocking
      - Handle process termination and recovery gracefully
      
      ## GenServer
      - Use GenServer for stateful, long-running processes
      - Keep GenServer callbacks small and focused
      - Avoid blocking operations in `handle_call` callbacks
      - Use `handle_continue` for post-initialization work
      - Prefer `handle_cast` for fire-and-forget operations
      
      ## Task
      - Use Task for concurrent, short-lived operations
      - Group related tasks with Task.Supervisor
      - Use Task.async/await for parallelizing independent work
      - Consider Task.yield_many for handling multiple tasks with timeouts
      
      ## Supervision
      - Design supervision trees to reflect the dependency hierarchy
      - Choose appropriate restart strategies
      - Use DynamicSupervisor for dynamic child processes
      - Keep supervisor modules simple; avoid business logic
      
      ## Message Passing
      - Keep messages small and well-defined
      - Document the message formats your processes handle
      - Use pattern matching to handle different message types
      - Avoid sharing mutable state between processes
      
      ## State Management
      - Keep process state as simple as possible
      - Document the structure of the state
      - Consider using structs for complex state
      - Properly initialize state to avoid nil errors
      
      ## Error Handling
      - Use "let it crash" philosophy for unexpected errors
      - Recover from expected errors within the process
      - Add monitoring or linking where appropriate
      - Log important errors before crashing

examples:
  - input: |
      defmodule UserManager do
        def start do
          spawn(fn -> loop(%{}) end)
        end
        
        def loop(state) do
          receive do
            {:add, name, pid} ->
              loop(Map.put(state, name, pid))
            {:lookup, name, caller} ->
              send(caller, Map.get(state, name))
              loop(state)
          end
        end
      end
    output: |
      defmodule UserManager do
        use GenServer
        
        # Client API
        
        def start_link(opts \\ []) do
          GenServer.start_link(__MODULE__, %{}, opts)
        end
        
        def add(server, name, pid) do
          GenServer.cast(server, {:add, name, pid})
        end
        
        def lookup(server, name) do
          GenServer.call(server, {:lookup, name})
        end
        
        # Server Callbacks
        
        @impl true
        def init(state) do
          {:ok, state}
        end
        
        @impl true
        def handle_cast({:add, name, pid}, state) do
          {:noreply, Map.put(state, name, pid)}
        end
        
        @impl true
        def handle_call({:lookup, name}, _from, state) do
          {:reply, Map.get(state, name), state}
        end
      end
  
  - input: |
      defmodule DataProcessor do
        def process_file(filename) do
          data = File.read!(filename)
          results = process_data(data)
          write_results(results)
        end
        
        defp process_data(data) do
          # Long operation
        end
        
        defp write_results(results) do
          # Write to database
        end
      end
    output: |
      defmodule DataProcessor do
        def process_file(filename) do
          Task.async(fn ->
            case File.read(filename) do
              {:ok, data} -> process_data(data)
              {:error, reason} -> {:error, reason}
            end
          end)
          |> Task.await(30_000)
          |> case do
            {:error, reason} -> 
              {:error, reason}
            results -> 
              Task.start(fn -> write_results(results) end)
              {:ok, results}
          end
        end
        
        defp process_data(data) do
          # Break large data into chunks and process concurrently
          data
          |> chunk_data()
          |> Enum.map(&Task.async(fn -> process_chunk(&1) end))
          |> Task.await_many(20_000)
          |> combine_results()
        end
        
        defp process_chunk(chunk) do
          # Process individual chunk
        end
        
        defp chunk_data(data) do
          # Split data into manageable chunks
        end
        
        defp combine_results(results) do
          # Combine chunk results
        end
        
        defp write_results(results) do
          # Write to database
        end
      end

metadata:
  priority: high
  version: 1.0
</rule> 